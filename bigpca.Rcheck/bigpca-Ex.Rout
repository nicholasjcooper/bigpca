
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bigpca"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('bigpca')
Loading required package: reader
Loading required package: NCmisc

Attaching package: ‘reader’

The following objects are masked from ‘package:NCmisc’:

    cat.path, get.ext, rmv.ext

Loading required package: bigmemory
Loading required package: biganalytics
Loading required package: foreach
Loading required package: biglm
Loading required package: DBI
Warning: replacing previous import ‘reader::rmv.ext’ by ‘NCmisc::rmv.ext’ when loading ‘bigpca’
Warning: replacing previous import ‘reader::get.ext’ by ‘NCmisc::get.ext’ when loading ‘bigpca’
Warning: replacing previous import ‘reader::cat.path’ by ‘NCmisc::cat.path’ when loading ‘bigpca’

Attaching package: ‘bigpca’

The following object is masked from ‘package:NCmisc’:

    dir.force.slash

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PC.correct")
> ### * PC.correct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PC.correct
> ### Title: Correct a big.matrix by principle components
> ### Aliases: PC.correct
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("testMyBig.bck")) { unlink(c("testMyBig.bck","testMyBig.dsc")) }
> mat2 <- sim.cor(500,200,genr=function(n){ (runif(n)/2+.5) })
> bmat2 <- as.big.matrix(mat2,backingfile="testMyBig.bck",
+  descriptorfile="testMyBig.dsc",  backingpath = getwd())
> ## calculate PCA ##
> rm(bmat2) 
> unlink(c("testMyBig.bck","testMyBig.dsc"))
> setwd(orig.dir) # reset working dir to original
> 
> 
> 
> cleanEx()
> nameEx("big.PCA")
> ### * big.PCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: big.PCA
> ### Title: PCA/Singular Value Decomposition for big.matrix
> ### Aliases: big.PCA
> 
> ### ** Examples
> 
> # create an example matrix and its transpose
> min.dim <- 200; nvar <- 500; subset.size <- 50
> mat <- matrix(rnorm(min.dim*nvar),ncol=min.dim) 
> prv.large(mat)

      col# 
 row#        1        2  .....       200 
    1  -0.6265   0.0773   ...     0.0374 
    2   0.1836  -0.2969   ...    -1.6128 
    3  -0.8356  -1.1832   ...     0.7146 
  ...      ...      ...   ...        ... 
  500  -0.8733  -0.6973   ...     0.7118 
> t.mat <- t(mat)
> # create two alternative covariance matrices
> MMs <- t.mat %*% mat
> MsM <- mat %*% t.mat
> # run singular value decomposition
> pca <- svd(mat)   
> D <- pca$d # singular values (=sqrt(eigenvalues))
> V <- pca$v # right singular vector
> U <- pca$u # left singular vector
> sig <- mat-mat; diag(sig) <- D; 
> MMs2 <- V %*% (t(sig) %*% sig) %*% t(V)
> sig <- t.mat-t.mat; diag(sig) <- D; 
> MsM2 <- U %*% (sig %*% t(sig)) %*% t(U)
> # show that the covariance matrices are equal to the functions of 
> # the left and right singular vectors
> prv(MMs,MsM); prv(MMs2,MsM2)
MMs (matrix, 200*200)

      col# 
 row#          1          2  .....         200 
    1   511.2318   -22.5321   ...     -22.6612 
    2   -22.5321   558.8836   ...       12.462 
    3   -14.5398   -40.9556   ...     -32.9189 
  ...        ...        ...   ...          ... 
  200   -22.6612     12.462   ...     568.2967 

MsM (matrix, 500*500)

      col# 
 row#          1          2  .....         500 
    1   198.2148    -1.7057   ...      16.2122 
    2    -1.7057   241.7104   ...       0.4053 
    3   -14.7584     12.003   ...       4.6714 
  ...        ...        ...   ...          ... 
  500    16.2122     0.4053   ...     191.1251 

MMs2 (matrix, 200*200)

      col# 
 row#          1          2  .....         200 
    1   511.2318   -22.5321   ...     -22.6612 
    2   -22.5321   558.8836   ...       12.462 
    3   -14.5398   -40.9556   ...     -32.9189 
  ...        ...        ...   ...          ... 
  200   -22.6612     12.462   ...     568.2967 

MsM2 (matrix, 500*500)

      col# 
 row#          1          2  .....         500 
    1   198.2148    -1.7057   ...      16.2122 
    2    -1.7057   241.7104   ...       0.4053 
    3   -14.7584     12.003   ...       4.6714 
  ...        ...        ...   ...          ... 
  500    16.2122     0.4053   ...     191.1251 

> pr <- princomp(mat) # PCA using eigendecomposition of cov matrix
> L <- matrix(rep(0,40000),ncol=200); diag(L) <- pr[[1]]^2 # eigenvalues as diag
> mat2 <- (pr[[2]]) %*% L %*%  solve(pr[[2]]) # = eigenvectors * eigenvalues * inv(eigenvectors)
> prv.large(cov(mat)); prv.large(mat2) #  == COVmat (may be slight tolerance differences)

      col# 
 row#        1        2  .....       200 
    1    1.024  -0.0441   ...     -0.045 
    2  -0.0441   1.1179   ...      0.024 
    3  -0.0291  -0.0822   ...     -0.066 
  ...      ...      ...   ...        ... 
  200   -0.045    0.024   ...     1.1385 

      col# 
 row#        1        2  .....       200 
    1    1.022   -0.044   ...    -0.0449 
    2   -0.044   1.1157   ...      0.024 
    3   -0.029   -0.082   ...    -0.0659 
  ...      ...      ...   ...        ... 
  200  -0.0449    0.024   ...     1.1362 
> ## Now demonstrate the correlation between SVD and PCA ##
> # the right singular vector is highly correlated with the pca loadings:
> median(abs(diag(cor(V,pr[["loadings"]]))))
[1] 0.9834328
> # the left singular vector is highly correlated with the pca scores (eigenvectors):
> median(abs(diag(cor(U,pr[["scores"]]))))
[1] 0.9835682
> cor(pr$sdev,D) # the singular values are equivalent to the eigenvalues
[1] 0.9999933
> 
> ## MAIN EXAMPLES ##
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("testMyBig.bck")) { unlink(c("testMyBig.bck","testMyBig.dsc")) }
> bmat <- as.big.matrix(mat,backingfile="testMyBig.bck",
+  descriptorfile="testMyBig.dsc",  backingpath = getwd())
> result <- big.PCA(bmat) #,verbose=TRUE)
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> headl(result)
$PCs:

      colnames 
 row#      PC1      PC2  .....      PC50 
    1  -0.0277   0.0687   ...     0.0317 
    2   0.0979   0.0284   ...    -0.1972 
    3  -0.0358  -0.0786   ...    -0.0055 
    4  -0.1322  -0.0812   ...     -0.065 
    5  -0.1604   0.0996   ...     0.0455 
    6  -0.1244  -0.1826   ...    -0.0058 
  ...      ...      ...   ...        ... 
  200   0.1479  -0.1411   ...    -0.1523 
$Evalues:
[1] 1315.744 1267.465 1232.340 1207.903 1188.520 1170.104
> # plot the eigenvalues with a linear fit line and elbow placed at 13
> Eigv <- pca.scree.plot(result$Evalues,M=bmat,elbow=6,printvar=FALSE)
> rm(bmat) 
> unlink(c("testMyBig.bck","testMyBig.dsc"))
> ##  generate some data with reasonable intercorrelations ##
> mat2 <- sim.cor(500,200,genr=function(n){ (runif(n)/2+.5) })
> bmat2 <- as.big.matrix(mat2,backingfile="testMyBig2.bck",
+  descriptorfile="testMyBig2.dsc",  backingpath = getwd())
> # calculate PCA on decreasing subset size 
> result2 <- big.PCA(bmat2,thin=FALSE)
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> normal <- result2$PCs; rm(result2)
> result3 <- big.PCA(bmat2,thin=TRUE,keep=.5, pref="t1")
t1.dsc 
  "t1" 
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> thinned <- result3$PCs; rm(result3)
> result4 <- big.PCA(bmat2,thin=TRUE,keep=.5, pref="t2", how="cor")
t2.dsc 
  "t2" 
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> corred <- result4$PCs; rm(result4)
> result5 <- big.PCA(bmat2,thin=TRUE,keep=.5, pref="t3", how="pca")
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
t3.dsc 
  "t3" 
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> pced <- result5$PCs; rm(result5)
> result6 <- big.PCA(bmat2,thin=TRUE,keep=.2, pref="t4")
t4.dsc 
  "t4" 
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> thinner <- result6$PCs; rm(result6)
> ## correlate the resulting PCs with the un-thinned PCs
> cors.thin.with.orig <- apply(cor(normal,thinned),1,max)
> cors.corred.with.orig <- apply(cor(normal,corred),1,max)
> cors.pced.with.orig <- apply(cor(normal,pced),1,max)
> cors.thinner.with.orig <-apply(cor(normal,thinner),1,max)
> plot(cors.thin.with.orig,type="l",col="red",ylim=c(0,1))
> lines(cors.thinner.with.orig,col="orange")
> lines(cors.corred.with.orig,col="lightblue")
> lines(cors.pced.with.orig,col="lightgreen")
> # can see that the first component is highly preserved,
> # and next components, somewhat preserved; try using different thinning methods
> rm(bmat2) 
> unlink(c("testMyBig2.bck","testMyBig2.dsc"))
> setwd(orig.dir)
> 
> 
> 
> cleanEx()
> nameEx("big.algebra.install.help")
> ### * big.algebra.install.help
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: big.algebra.install.help
> ### Title: Attempt to install the bigalgebra package
> ### Aliases: big.algebra.install.help
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("big.select")
> ### * big.select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: big.select
> ### Title: Select a subset of a big.matrix
> ### Aliases: big.select
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("sel.bck")) { unlink(c("sel.bck","sel.dsc")) }
> bmat <- generate.test.matrix(5,big.matrix=TRUE)
> # take a subset of the big.matrix without using deepcopy
> sel <- big.select(bmat,c(1,2,8),c(2:10),
+  deepC=FALSE,verbose=TRUE, delete.existing=TRUE)
sel.dsc 
  "sel" 
 attached matrix with dims: 100,1000 
 calculating selections for rows
 selected 9 listed samples and 3 variables

Reordering Variables and Samples...

INDEXES SUMMARY
3 row indexes range is from 1 to 8 
-->, 1, 2, 8
9 col indexes range is from 2 to 10 
-->, 2, 3, 4, 5, 6, 7

 raw big.matrix summary before selection/ordering:

Big matrix with: 100 rows, 1000 columns
 - data type: numeric 
 - not filebacked
              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs77792   0.3701   0.8872   ...     1.6589 
   2  rs48313  -0.5753   1.0604   ...    -0.0077 
   3  rs10907   2.9192  -0.6157   ...     0.7742 
  ..     ....      ...      ...   ...        ... 
 100  rs33140   2.5446  -1.8544   ...     1.0078 

 running reorder in system memory
 adding colnames
 adding rownames
 converting matrix to big.matrix
 matrix descr saved as standard description file: sel.dsc 
 created big.matrix description file: sel.dsc 
 created big.matrix backing file: sel.bck 
 created big.matrix binary description file: sel.RData 
> prv.big.matrix(sel)

Big matrix; 'sel.RData', with: 3 rows, 9 columns
 - data type: numeric 

              colnames 
Row# rownames  ID86734  ID42640  .....   ID95611 
   1  rs77792   0.8872  -0.4627   ...    -0.1571 
   2  rs48313   1.0604   1.0431   ...    -0.6007 
   3  rs91142  -0.3837   1.8973   ...    -0.3971 

> # now select the same subset using row/column names from text files
> writeLines(rownames(bmat)[c(1,2,8)],con="bigrowstemp.txt")
> writeLines(colnames(bmat)[c(2:10)],con="bigcolstemp.txt")
> sel <- big.select(bmat, "bigrowstemp.txt","bigcolstemp.txt", delete.existing=TRUE, pref="sel2")
sel2.dsc 
  "sel2" 
> prv.big.matrix(sel)

Big matrix; 'sel2.RData', with: 3 rows, 9 columns
 - data type: numeric 

              colnames 
Row# rownames  ID86734  ID42640  .....   ID95611 
   1  rs77792   0.8872  -0.4627   ...    -0.1571 
   2  rs48313   1.0604   1.0431   ...    -0.6007 
   3  rs91142  -0.3837   1.8973   ...    -0.3971 

> rm(bmat)
> rm(sel)  
> unlink(c("bigcolstemp.txt","bigrowstemp.txt","sel.RData","sel2.bck","sel2.dsc"))
> setwd(orig.dir) # reset working dir to original
> 
> 
> 
> cleanEx()
> nameEx("big.t")
> ### * big.t
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: big.t
> ### Title: Transpose function for big.matrix objects
> ### Aliases: big.t
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("test.bck")) { unlink(c("test.bck","test.dsc")) }
> bM <- filebacked.big.matrix(200, 500,
+        dimnames = list(paste("r",1:200,sep=""), paste("c",1:500,sep="")),
+        backingfile = "test.bck",  backingpath = getwd(), descriptorfile = "test.dsc")
> bM[1:200,] <- replicate(500,rnorm(200))
> prv.big.matrix(bM)
Big matrix with: 200 rows, 500 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....      c500 
   1       r1  -0.6265   0.4094   ...    -1.6166 
   2       r2   0.1836   1.6889   ...     0.2588 
   3       r3  -0.8356   1.5866   ...    -2.5359 
  ..     ....      ...      ...   ...        ... 
 200     r200  -0.3811   0.8652   ...     0.7118 

> tbM <- big.t(bM,verbose=TRUE)
 creating 500 x 200 target matrix, t.bigMat ...done

Adding names
 added colnames
 added rownames
Warning in big.t(bM, verbose = TRUE) :
  number of columns quite small, may cause issues
 transposing 'bigMat' into new big.matrix object:
 combining complete, converting result to big matrix
 created big.matrix description file: t.bigMat.dsc 
 created big.matrix backing file: t.bigMat.bck 
 created big.matrix binary description file: t.bigMat.RData 
> prv.big.matrix(tbM)
Big matrix with: 500 rows, 200 columns
 - data type: numeric 

              colnames 
Row# rownames       r1       r2  .....      r200 
   1       c1  -0.6265   0.1836   ...    -0.3811 
   2       c2   0.4094   1.6889   ...     0.8652 
   3       c3   1.0744   1.8957   ...    -0.7631 
  ..     ....      ...      ...   ...        ... 
 500     c500  -1.6166   0.2588   ...     0.7118 

> rm(tbM)
> rm(bM)  
> unlink(c("t.bigMat.RData","t.bigMat.bck","t.bigMat.dsc","test.bck","test.dsc"))
> setwd(orig.dir)
> 
> 
> 
> cleanEx()
> nameEx("bigpca-package")
> ### * bigpca-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bigpca-package
> ### Title: PCA, Transpose and Multicore Functionality for 'big.matrix'
> ###   Objects
> ### Aliases: bigpca-package bigpca
> ### Keywords: package manip multivariate IO array
> 
> ### ** Examples
> 
> #' # create a test big.matrix object (file-backed)
> #' orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> #' bM <- filebacked.big.matrix(20, 50,
> #'        dimnames = list(paste("r",1:20,sep=""), paste("c",1:50,sep="")),
> #'        backingfile = "test.bck",  backingpath = getwd(), descriptorfile = "test.dsc")
> #' bM[1:20,] <- replicate(50,rnorm(20))
> #' prv.big.matrix(bM)
> #' # now transpose
> #' tbM <- big.t(bM,dir=getwd(),verbose=T)
> #' prv.big.matrix(tbM,row=10,col=4)
> #' colSDs <- bmcapply(tbM,2,sd,n.cores=10)
> #' rowSDs <- bmcapply(bM,1,sd,n.cores=10) # use up to 10 cores if available
> #' ##  generate some data with reasonable intercorrelations ##
> #' mat <- sim.cor(500,200,genr=function(n){ (runif(n)/2+.5) })
> #' bmat <- as.big.matrix(mat)
> #' # calculate PCA 
> #' result <- big.PCA(bmat)
> #' corrected <- PC.correct(result2,bmat)
> #' corrected2 <- PC.correct(result2,bmat,n.cores=5)
> #' all.equal(corrected,corrected2)
> #' rm(tbM); rm(bM);rm(result); 
> #' rm(corrected);rm(corrected2); rm(bmat)
> #' clear_active_bms() # delete big.matrix objects in memory
> #' unlink(c("test.bck","test.dsc"))
> #' setwd(orig.dir)
> 
> 
> 
> cleanEx()
> nameEx("bmcapply")
> ### * bmcapply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bmcapply
> ### Title: A multicore 'apply' function for big.matrix objects
> ### Aliases: bmcapply
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("test.bck")) { unlink(c("test.bck","test.dsc")) }
> # set up a toy example of a big.matrix (functions most relevant when matrix is huge)
> bM <- filebacked.big.matrix(20, 50,
+        dimnames = list(paste("r",1:20,sep=""), paste("c",1:50,sep="")),
+        backingfile = "test9.bck",  backingpath = getwd(), descriptorfile = "test9.dsc")
> bM[1:20,] <- replicate(50,rnorm(20))
> prv.big.matrix(bM)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....       c50 
   1       r1  -0.6265    0.919   ...     0.4637 
   2       r2   0.1836   0.7821   ...     0.0748 
   3       r3  -0.8356   0.0746   ...    -0.4868 
  ..      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632   ...    -0.6973 

> # compare native bigmemory column-wise function to multicore [native probably faster]
> v1 <- colsd(bM) # native bigmemory function
> v2 <- bmcapply(bM,2,sd,n.cores=2) # use up to 2 cores if available
Warning in bmcapply(bM, 2, sd, n.cores = 2) :
  number of rows/columns quite small, may cause issues
> print(all.equal(v1,v2))
[1] TRUE
> # compare row-means approaches
> v1 <- rowMeans(as.matrix(bM))
> v2 <- bmcapply(bM,1,mean,n.cores=2) # use up to 2 cores if available
Warning in bmcapply(bM, 1, mean, n.cores = 2) :
  number of rows/columns quite small, may cause issues
> v3 <- bmcapply(bM,1,rowMeans,use.apply=FALSE)
Warning in bmcapply(bM, 1, rowMeans, use.apply = FALSE) :
  number of rows/columns quite small, may cause issues
> print(all.equal(v1,v2)); print(all.equal(v2,v3))
[1] TRUE
[1] TRUE
> # example using a custom combine function; taking the mean of column means
> weight.means.to.scalar <- function(...) { X <- list(...); mean(unlist(X)) }
> v1 <- bmcapply(bM, 2, sd, combine.fn=weight.means.to.scalar)
Warning in bmcapply(bM, 2, sd, combine.fn = weight.means.to.scalar) :
  number of rows/columns quite small, may cause issues
> v2 <- mean(colsd(bM))
> print(all.equal(v1,v2))
[1] TRUE
> ## note that this function works with normal matrices, however, multicore
> # operation is only likely to benefit speed when operations take more than 10 seconds
> # so this function will mainly help using large matrices or intensive functions
> test.size <- 5 # try increasing this number, or use more intensive function than sd()
> # to test relative speed for larger matrices
> M <- matrix(runif(10^test.size),ncol=10^(test.size-2)) # normal matrix
> system.time(bmcapply(M,2,sd,n.cores=2)) # use up to 2 cores if available
   user  system elapsed 
  0.202   0.219   0.514 
> system.time(apply(M,2,sd)) # 
   user  system elapsed 
   0.01    0.00    0.01 
> rm(bM) 
> unlink(c("test9.bck","test9.dsc"))
> setwd(orig.dir)
> 
> 
> 
> cleanEx()
> nameEx("clear_active_bms")
> ### * clear_active_bms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clear_active_bms
> ### Title: Function to clear big.matrix objects in the calling environment
> ### Aliases: clear_active_bms
> 
> ### ** Examples
> 
> clear_active_bms(ignore.os=TRUE, only.culprits=FALSE, list.only=TRUE) # list those in memory
NULL
> 
> 
> 
> cleanEx()
> nameEx("estimate.eig.vpcs")
> ### * estimate.eig.vpcs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimate.eig.vpcs
> ### Title: Estimate the variance percentages for uncalculated eigenvalues
> ### Aliases: estimate.eig.vpcs
> 
> ### ** Examples
> 
> nsamp <- 100; nvar <- 300; subset.size <- 25; elbow <- 6
> mat <- matrix(rnorm(nsamp*nvar),ncol=nsamp) 
> # or use: # mat <- crimtab-rowMeans(crimtab) ; subset.size <- 10 # crimtab centred
> prv.large(mat)

      col# 
 row#        1        2  .....       100 
    1  -0.6265   0.8937   ...     0.9367 
    2   0.1836  -1.0473   ...     1.2677 
    3  -0.8356   1.9713   ...    -0.0385 
  ...      ...      ...   ...        ... 
  300  -0.3058  -0.7631   ...     0.0907 
> pca <- svd(mat,nv=subset.size,nu=0) # calculates subset of V, but all D
> require(irlba)
Loading required package: irlba
Loading required package: Matrix
> pca2 <- irlba(mat,nv=subset.size,nu=0) # calculates subset of V & D
> pca3 <- princomp(mat,cor=TRUE) # calculates all
> # number of eigenvalues for svd is the smaller dimension of the matrix
> eig.varpc <- estimate.eig.vpcs(pca$d^2,M=mat)$variance.pcs
All eigenvalues present, estimate not required
> cat("sum of all eigenvalue-variances=",sum(eig.varpc),"\n")
sum of all eigenvalue-variances= 1 
> print(eig.varpc[1:elbow])
[1] 0.02485145 0.02332462 0.02259837 0.02224302 0.02124347 0.02076434
> # number of eigenvalues for irlba is the size of the subset if < min(dim(M))
> eig.varpc <- estimate.eig.vpcs((pca2$d^2)[1:subset.size],M=mat)$variance.pcs
 estimate of eigenvalue sum of 75 uncalculated eigenvalues: 7967.04 
> print(eig.varpc[1:elbow])  ## using 1/x model, underestimates total variance
[1] 0.03432622 0.03221728 0.03121414 0.03072331 0.02934268 0.02868087
> eig.varpc <- estimate.eig.vpcs((pca2$d^2)[1:subset.size],M=mat,linear=TRUE)$variance.pcs
 estimate of eigenvalue sum of 75 uncalculated eigenvalues: 7967.04 
> print(eig.varpc[1:elbow])  ## using linear model, closer to exact answer
[1] 0.03432622 0.03221728 0.03121414 0.03072331 0.02934268 0.02868087
> eig.varpc <- estimate.eig.vpcs((pca3$sdev^2),M=mat)$variance.pcs
All eigenvalues present, estimate not required
> print(eig.varpc[1:elbow])  ## different analysis, but fairly similar var.pcs
    Comp.1     Comp.2     Comp.3     Comp.4     Comp.5     Comp.6 
0.02435596 0.02320026 0.02235750 0.02222649 0.02109053 0.02048019 
> 
> 
> 
> cleanEx()

detaching ‘package:irlba’, ‘package:Matrix’

> nameEx("generate.test.matrix")
> ### * generate.test.matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate.test.matrix
> ### Title: Generate a test matrix of random data
> ### Aliases: generate.test.matrix
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> mat <- (generate.test.matrix(5)); prv(mat)
mat (matrix, 100*1000)

              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs77792   0.3701   0.8872   ...     1.6589 
   2  rs48313  -0.5753   1.0604   ...    -0.0077 
   3  rs10907   2.9192  -0.6157   ...     0.7742 
  ..     ....      ...      ...   ...        ... 
 100  rs33140   2.5446  -1.8544   ...     1.0078 

> lst <- (generate.test.matrix(5,3,big.matrix=TRUE,file.name="bigtest"))
> mat <- lst[[1]]; prv(mat); headl(lst[2:3]); 

Big matrix; 'mat', with: 1000 rows, 100 columns
 - data type: numeric 

              colnames 
Row# rownames   ID2115   ID3387  .....    ID5590 
   1 rs642653   0.1189  -1.4703   ...    -0.5321 
   2 rs575603   0.2219  -1.0905   ...     0.0991 
   3 rs416407  -1.2635  -0.3193   ...     1.0447 
  ..     ....      ...      ...   ...        ... 
1000 rs356685  -0.4739  -0.4649   ...     1.0095 


$descr:
[1] "bigtest.dsc"
$bck:
[1] "bigtest.bck"
> unlink(unlist(lst[2:3]))
> setwd(orig.dir) # reset working dir to original
> 
> 
> 
> cleanEx()
> nameEx("get.big.matrix")
> ### * get.big.matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.big.matrix
> ### Title: Retrieve a big.matrix object
> ### Aliases: get.big.matrix
> 
> ### ** Examples
> 
> # set up a toy example of a big.matrix 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("test.bck")) { unlink(c("test.bck","test.dsc")) }
> bM <- filebacked.big.matrix(20, 50,
+        dimnames = list(paste("r",1:20,sep=""), paste("c",1:50,sep="")),
+        backingfile = "test.bck",  backingpath = getwd(), descriptorfile = "test.dsc")
> bM[1:20,] <- replicate(50,rnorm(20))
> # Now have a big matrix which can be retrieved using this function in 4 ways:
> d.bM <- describe(bM)
> save(d.bM,file="fn.RData")
> bM1 <- get.big.matrix("test.dsc")
> bM2 <- get.big.matrix(d.bM)
> bM3 <- get.big.matrix("fn.RData")
> bM4 <- get.big.matrix(bM)
> prv.big.matrix(bM)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....       c50 
   1       r1  -0.6265    0.919   ...     0.4637 
   2       r2   0.1836   0.7821   ...     0.0748 
   3       r3  -0.8356   0.0746   ...    -0.4868 
  ..      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632   ...    -0.6973 

> prv.big.matrix(bM1)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....       c50 
   1       r1  -0.6265    0.919   ...     0.4637 
   2       r2   0.1836   0.7821   ...     0.0748 
   3       r3  -0.8356   0.0746   ...    -0.4868 
  ..      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632   ...    -0.6973 

> prv.big.matrix(bM2)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....       c50 
   1       r1  -0.6265    0.919   ...     0.4637 
   2       r2   0.1836   0.7821   ...     0.0748 
   3       r3  -0.8356   0.0746   ...    -0.4868 
  ..      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632   ...    -0.6973 

> prv.big.matrix(bM3)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....       c50 
   1       r1  -0.6265    0.919   ...     0.4637 
   2       r2   0.1836   0.7821   ...     0.0748 
   3       r3  -0.8356   0.0746   ...    -0.4868 
  ..      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632   ...    -0.6973 

> prv.big.matrix(bM4)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....       c50 
   1       r1  -0.6265    0.919   ...     0.4637 
   2       r2   0.1836   0.7821   ...     0.0748 
   3       r3  -0.8356   0.0746   ...    -0.4868 
  ..      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632   ...    -0.6973 

> rm(bM) 
> unlink(c("fn.RData","test.bck","test.dsc"))
> setwd(orig.dir)
> 
> 
> 
> cleanEx()
> nameEx("import.big.data")
> ### * import.big.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: import.big.data
> ### Title: Load a text file into a big.matrix object
> ### Aliases: import.big.data
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> # Collate all file names to use in this example #
> all.fn <- c("rownames.txt","colnames.txt","functestdn.txt","funclongcol.txt","functest.txt",
+  paste("rn",1:3,".txt",sep=""),paste("cn",1:3,".txt",sep=""),
+  paste("split",1:3,".txt",sep=""),
+  paste("splitmatCd",1:3,".txt",sep=""),paste("splitmatRd",1:3,".txt",sep=""),
+  paste("splitmatC",1:3,".txt",sep=""), paste("splitmatR",1:3,".txt",sep=""))
> any.already <- file.exists(all.fn)
> if(any(any.already)) { 
+  warning("files already exist in the working directory with the same names as some example files") }
> # SETUP a test matrix and reference files # 
> test.size <- 4 # try increasing this number for larger matrices
> M <- matrix(runif(10^test.size),ncol=10^(test.size-2)) # normal matrix
> write.table(M,sep="\t",col.names=FALSE,row.names=FALSE,
+  file="functest.txt",quote=FALSE) # no dimnames
> rown <- paste("rs",sample(10:99,nrow(M),replace=TRUE),sample(10000:99999,nrow(M)),sep="")
> coln <- paste("ID",sample(1:9,ncol(M),replace=TRUE),sample(10000:99999,ncol(M)),sep="")
> r.fn <- "rownames.txt"; c.fn <- "colnames.txt"
> Mdn <- M; colnames(Mdn) <- coln; rownames(Mdn) <- rown
> # with dimnames
> write.table(Mdn,sep="\t",col.names=TRUE,row.names=TRUE,file="functestdn.txt",quote=FALSE) 
> prv.large(Mdn)

               colnames 
Row#  rownames ID390841 ID189792  .....  ID971759 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786   0.6049   0.7829   ...     0.6527 
> writeLines(paste(as.vector(M)),con="funclongcol.txt")
> in.fn <- "functest.txt"
> 
> ### IMPORTING SIMPLE 1 FILE MATRIX ##
> writeLines(rown,r.fn); writeLines(coln,c.fn)
> #1. import without specifying row/column names
> ii <- import.big.data(in.fn); prv.big.matrix(ii) # SLOWER without dimnames!
no column names specified
no row names specified
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
 opening connection to matrix format datafile (1/1): functest.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................

 created big.matrix description file: functest.dsc 
 created big.matrix backing file: functest.bck 

Big matrix; 'functest.RData', with: 100 rows, 100 columns
 - data type: numeric 

              colnames 
Row# rownames     col1     col2  .....    col100 
   1     row1   0.2655   0.6547   ...     0.0652 
   2     row2   0.3721   0.3532   ...     0.2774 
   3     row3   0.5729   0.2703   ...     0.6004 
  ..     ....      ...      ...   ...        ... 
 100   row100   0.6049   0.7829   ...     0.6527 

> #2. import using row/col names from file
> ii <- import.big.data(in.fn,cols.fn="colnames.txt",rows.fn="rownames.txt", pref="p1")
Reading column and row names...
 reading column names from colnames.txt 
 reading row names from /tmp/RtmpHAlPrw/rownames.txt 
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
 opening connection to matrix format datafile (1/1): functest.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................

 created big.matrix description file: p1.dsc 
 created big.matrix backing file: p1.bck 
> prv.big.matrix(ii)

Big matrix; 'p1.RData', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames ID390841 ID189792  .....  ID971759 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786   0.6049   0.7829   ...     0.6527 

> #3. import by passing colnames/rownames as objects
> ii <- import.big.data(in.fn, col.names=coln,row.names=rown, pref="p2")
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
 opening connection to matrix format datafile (1/1): functest.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................

 created big.matrix description file: p2.dsc 
 created big.matrix backing file: p2.bck 
> prv.big.matrix(ii)

Big matrix; 'p2.RData', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames ID390841 ID189792  .....  ID971759 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786   0.6049   0.7829   ...     0.6527 

> 
> ### IMPORTING SIMPLE 1 FILE MATRIX WITH DIMNAMES ##
> #1. import without specifying row/column names, but they ARE in the file
> in.fn <- "functestdn.txt"
> ii <- import.big.data(in.fn, pref="p3"); prv.big.matrix(ii)
no column names specified
no row names specified
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
 opening connection to matrix format datafile (1/1): functestdn.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................
updated big.matrix rownames from names in file(s)
Warning in import.big.data(in.fn, pref = "p3") :
  Had to change description file to a binary file to update rownames. This can be read in with get.big.matrix() [and should be faster to load]

 created big.matrix description file: /tmp/RtmpHAlPrw/p3.RData 
 created big.matrix backing file: p3.bck 

Big matrix; 'p3.RData', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames ID390841 ID189792  .....  ID971759 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786   0.6049   0.7829   ...     0.6527 

> 
> ### IMPORTING SIMPLE 1 FILE MATRIX WITH MISORDERED rownames ##
> rown2 <- rown; rown <- sample(rown);
> # re-run test3 using in.fn with dimnames
> ii <- import.big.data(in.fn, col.names=coln,row.names=rown, pref="p4")
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
Warning in check.text.matrix.format(fn = ifn, ncol = cls1, header = ID.list[[ffc]],  :
  order of row labels in data file does not match order of inputted rowname list
proceeding, but using name lookup method will make import very slow and possibly unstable
If your source file has an inconsistent order this is the only supported import method.
Otherwise, recommend to cancel (ctrl-C), amend this discrepancy and run again
 opening connection to matrix format datafile (1/1): functestdn.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................
Warning in import.big.data(in.fn, col.names = coln, row.names = rown, pref = "p4") :
  rownames didn't match what was in filecheck the list in the file at:
 /tmp/RtmpHAlPrw/p4_file_rowname_list_check_this.txt

 file preview:
 [1] "rs6370080" "rs3731547" "rs3524723" "rs2296591" "rs7763176" "rs4086604"
 [7] "rs5156234" "rs5249952" "rs7647480" "rs8453322"


 created big.matrix description file: p4.dsc 
 created big.matrix backing file: p4.bck 
> prv.big.matrix(ii)

Big matrix; 'p4.RData', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames ID390841 ID189792  .....  ID971759 
   1 rs6370080   0.7323    0.105   ...       0.15 
   2 rs3731547   0.4821   0.5749   ...     0.0419 
   3 rs3524723   0.7774   0.6401   ...     0.5704 
  ..      ....      ...      ...   ...        ... 
 100 rs6728196   0.7125   0.1913   ...     0.9582 

> # restore rownames: 
> rown <- rown2
> 
> ### IMPORTING SIMPLE 1 FILE LONG FORMAT by columns ##
> in.fn <- "funclongcol.txt"; #rerun test 2 # 
> ii <- import.big.data(in.fn,cols.fn="colnames.txt",rows.fn="rownames.txt", pref="p5")
Reading column and row names...
 reading column names from colnames.txt 
 reading row names from /tmp/RtmpHAlPrw/rownames.txt 
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
 opening connection to long format datafile (1/1): funclongcol.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................

 created big.matrix description file: p5.dsc 
 created big.matrix backing file: p5.bck 
> prv.big.matrix(ii)

Big matrix; 'p5.RData', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames ID390841 ID189792  .....  ID971759 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786   0.6049   0.7829   ...     0.6527 

> 
> ### IMPORTING multifile LONG by cols ##
> # create the dataset and references
> splF <- factor(rep(c(1:3),ncol(M)*c(.1,.5,.4)))
> colnL <- split(coln,splF); MM <- as.data.frame(t(M))
> Ms2 <- split(MM,splF)
> Ms2 <- lapply(Ms2,
+    function(X) { X <- t(X); dim(X) <- c(nrow(M),length(X)/nrow(M)); X } )
> # preview Ms2 - not run # lapply(Ms2,prv.large)
> colfs <- paste("cn",1:length(colnL),".txt",sep="")
> infs <- paste("split",1:length(colnL),".txt",sep="")
> # create multiple column name files and input files
> for(cc in 1:length(colnL)) { writeLines(colnL[[cc]],con=colfs[cc]) }
> for(cc in 1:length(infs)) { 
+   writeLines(paste(as.vector((Ms2[[cc]]))),con=infs[cc]) }
>   
> # Now test the import using colnames and rownames lists
> ii <- import.big.data(infs, col.names=colnL,row.names=rown, pref="p6")
reading a single cohort from 3 source files.
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
 opening connection to long format datafile (1/3): split1.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................
 opening connection to long format datafile (2/3): split2.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................
 opening connection to long format datafile (3/3): split3.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
..................................................

 created big.matrix description file: p6.dsc 
 created big.matrix backing file: p6.bck 
> prv.big.matrix(ii)

Big matrix; 'p6.RData', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames ID390841 ID189792  .....  ID971759 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786   0.6049   0.7829   ...     0.6527 

> 
> ### IMPORTING multifile MATRIX by rows ##
> # create the dataset and references
> splF <- factor(rep(c(1,2,3),nrow(M)*c(.1,.5,.4)))
> rownL <- split(rown,splF)
> Ms <- split(M,splF)
> Ms <- lapply(Ms,function(X) { dim(X) <- c(length(X)/ncol(M),ncol(M)); X } )
> # preview Ms - not run # lapply(Ms,prv.large)
> # create multiple row name files and input files
> rowfs <- paste("rn",1:length(rownL),".txt",sep="")
> for(cc in 1:length(rownL)) { writeLines(rownL[[cc]],con=rowfs[cc]) }
> infs <- paste("splitmatR",1:length(colnL),".txt",sep="")
> for(cc in 1:length(infs)) { 
+  write.table(Ms[[cc]],sep="\t",col.names=FALSE,row.names=FALSE,file=infs[cc],quote=FALSE) }
>  
> # Now test the import using colnames and rownames files
> ii <- import.big.data(infs, col.names="colnames.txt",rows.fn=rowfs, pref="p7")
no column names specified
 reading row names from /tmp/RtmpHAlPrw/rn1.txt 
 reading row names from /tmp/RtmpHAlPrw/rn2.txt 
 reading row names from /tmp/RtmpHAlPrw/rn3.txt 
reading a single varset from 3 source files.
 found 100 column names and 100 marker names

Creating big matrix object to store group data
 predicted disk use:  0 GB
 opening connection to matrix format datafile (1/3): splitmatR1.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
......
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563        0        0   ...          0 
   2 rs6473916        0        0   ...          0 
   3 rs7581508        0        0   ...          0 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 1 (integer, 1)
next.row (character, 100) [head]:
[1] "0.2655086631421"   "0.654723928077146" "0.267508207354695"
[4] "0.673712232848629" "0.658877609064803" "0.554177061188966"

.....
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916        0        0   ...          0 
   3 rs7581508        0        0   ...          0 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 2 (integer, 1)
next.row (character, 100) [head]:
[1] "0.37212389963679"   "0.353197271935642"  "0.218645284883678" 
[4] "0.0948578554671258" "0.185069964500144"  "0.688275237567723" 

......
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508        0        0   ...          0 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 3 (integer, 1)
next.row (character, 100) [head]:
[1] "0.572853363351896" "0.270260145887733" "0.516796836396679"
[4] "0.492596120806411" "0.954378136899322" "0.658057553693652"

.....
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 4 (integer, 1)
next.row (character, 100) [head]:
[1] "0.908207789994776" "0.99268406117335"  "0.268950592027977"
[4] "0.461551840649918" "0.897848492022604" "0.663342725252733"

......
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 5 (integer, 1)
next.row (character, 100) [head]:
[1] "0.201681931037456" "0.633493264438584" "0.181168327340856"
[4] "0.375216530868784" "0.943697054404765" "0.472234202548862"

.....
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 6 (integer, 1)
next.row (character, 100) [head]:
[1] "0.898389684967697" "0.213208135217428" "0.518576137488708"
[4] "0.991099219536409" "0.72369075124152"  "0.969528166111559"

......
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 7 (integer, 1)
next.row (character, 100) [head]:
[1] "0.944675268605351" "0.129372348077595" "0.562782935798168"
[4] "0.176350713707507" "0.370357065927237" "0.402197062736377"

.....
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 8 (integer, 1)
next.row (character, 100) [head]:
[1] "0.660797792486846" "0.478118034312502" "0.129156854469329"
[4] "0.813435208518058" "0.781017540255561" "0.849552103783935"

......
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 9 (integer, 1)
next.row (character, 100) [head]:
[1] "0.62911404389888"   "0.924074469832703"  "0.256367604015395" 
[4] "0.0684466371312737" "0.011149508645758"  "0.756644907407463" 



Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 10) [head]:
[1] 1 2 3 4 5 6

cc: 10 (integer, 1)
next.row (character, 100) [head]:
[1] "0.0617862704675645" "0.59876096714288"   "0.717935275984928" 
[4] "0.40044974675402"   "0.940308712190017"  "0.532601219369099" 

 opening connection to matrix format datafile (2/3): splitmatR2.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 1 (integer, 1)
next.row (character, 100) [head]:
[1] "0.205974574899301" "0.976170694921166" "0.961409936426207"
[4] "0.141144325723872" "0.993749226210639" "0.874149660812691"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 2 (integer, 1)
next.row (character, 100) [head]:
[1] "0.176556752528995" "0.731792511884123" "0.100140846567228"
[4] "0.193309862399474" "0.3574057451915"   "0.467115115607157"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 3 (integer, 1)
next.row (character, 100) [head]:
[1] "0.687022846657783"   "0.356726912083104"   "0.763222689507529"  
[4] "0.841351716779172"   "0.747635063482448"   "0.00812845537438989"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 4 (integer, 1)
next.row (character, 100) [head]:
[1] "0.384103718213737" "0.431473690550774" "0.947966354666278"
[4] "0.719913988374174" "0.792909023817629" "0.72776700463146" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 5 (integer, 1)
next.row (character, 100) [head]:
[1] "0.769841419998556" "0.148211560677737" "0.818634688388556"
[4] "0.267212083097547" "0.705859006382525" "0.716589478775859"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 6 (integer, 1)
next.row (character, 100) [head]:
[1] "0.497699242085218"  "0.0130775754805654" "0.308292330708355" 
[4] "0.495001644827425"  "0.475825038738549"  "0.187426371034235" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 7 (integer, 1)
next.row (character, 100) [head]:
[1] "0.717618508264422"  "0.715566066093743"  "0.649579460499808" 
[4] "0.0831138978246599" "0.494654526002705"  "0.646067276829854" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 8 (integer, 1)
next.row (character, 100) [head]:
[1] "0.991906094830483" "0.103184235747904" "0.953355451114476"
[4] "0.353884240612388" "0.308052448788658" "0.541979279834777"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 9 (integer, 1)
next.row (character, 100) [head]:
[1] "0.380035179434344" "0.446284348610789" "0.953732650028542"
[4] "0.969208805356175" "0.695012246258557" "0.335320759797469"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 10 (integer, 1)
next.row (character, 100) [head]:
[1] "0.777445221319795" "0.640101045137271" "0.339979203417897"
[4] "0.624714189674705" "0.822793305618688" "0.637908723205328"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 11 (integer, 1)
next.row (character, 100) [head]:
[1] "0.934705231105909" "0.991838620044291" "0.262474110117182"
[4] "0.664618249749765" "0.434717640746385" "0.829201063839719"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 12 (integer, 1)
next.row (character, 100) [head]:
[1] "0.212142521282658" "0.495593577856198" "0.165453933179379"
[4] "0.312489656498656" "0.514732652809471" "0.708975198445842"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 13 (integer, 1)
next.row (character, 100) [head]:
[1] "0.651673766085878" "0.484349524369463" "0.322168056620285"
[4] "0.405689612729475" "0.663010967662558" "0.348550350870937"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 14 (integer, 1)
next.row (character, 100) [head]:
[1] "0.125555095961317" "0.173442334868014" "0.510125206550583"
[4] "0.996077371528372" "0.143166586523876" "0.128327874932438"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 15 (integer, 1)
next.row (character, 100) [head]:
[1] "0.267220668727532" "0.754820944508538" "0.923968471353874"
[4] "0.855082356370986" "0.344487393740565" "0.38807848887518" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 16 (integer, 1)
next.row (character, 100) [head]:
[1] "0.386114092543721" "0.453895489219576" "0.510959698352963"
[4] "0.953548396006227" "0.405763582326472" "0.92817754833959" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 17 (integer, 1)
next.row (character, 100) [head]:
[1] "0.0133903331588954" "0.511169783771038"  "0.257621260825545" 
[4] "0.812305092345923"  "0.0853110058233142" "0.804390771314502" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 18 (integer, 1)
next.row (character, 100) [head]:
[1] "0.382387957070023"  "0.207545113284141"  "0.0464608869515359"
[4] "0.782182115828618"  "0.932571928249672"  "0.758696807082742" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 19 (integer, 1)
next.row (character, 100) [head]:
[1] "0.86969084572047"  "0.228658142732456" "0.41785625834018" 
[4] "0.267878128914163" "0.838384066708386" "0.957249888917431"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 20 (integer, 1)
next.row (character, 100) [head]:
[1] "0.34034899668768"  "0.595711996313184" "0.854001502273604"
[4] "0.762151529546827" "0.879433296155185" "0.993913878686726"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 21 (integer, 1)
next.row (character, 100) [head]:
[1] "0.482080115471035" "0.57487219828181"  "0.347230677725747"
[4] "0.986311589134857" "0.935712467646226" "0.606440994655713"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 22 (integer, 1)
next.row (character, 100) [head]:
[1] "0.599565825425088"  "0.0770643802825361" "0.131442320533097" 
[4] "0.293605549028143"  "0.0724606334697455" "0.0293771654833108"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 23 (integer, 1)
next.row (character, 100) [head]:
[1] "0.493541307048872"  "0.0355405795853585" "0.374486864544451" 
[4] "0.399351106956601"  "0.378759440500289"  "0.336445357883349" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 24 (integer, 1)
next.row (character, 100) [head]:
[1] "0.186217601411045" "0.642795492196456" "0.631420228397474"
[4] "0.812131523853168" "0.537864922778681" "0.277658086735755"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 25 (integer, 1)
next.row (character, 100) [head]:
[1] "0.827373318606988"  "0.928615199634805"  "0.390078933676705" 
[4] "0.0771516691893339" "0.105050138663501"  "0.117197550134733" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 26 (integer, 1)
next.row (character, 100) [head]:
[1] "0.668466738192365"  "0.598092422354966"  "0.689627848798409" 
[4] "0.363696809858084"  "0.801687705563381"  "0.0432182590011507"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 27 (integer, 1)
next.row (character, 100) [head]:
[1] "0.79423986072652"  "0.560900748008862" "0.689413412474096"
[4] "0.442592467181385" "0.739641745807603" "0.370309785706922"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 28 (integer, 1)
next.row (character, 100) [head]:
[1] "0.107943625887856" "0.526027723914012" "0.554900623159483"
[4] "0.156714132521302" "0.052149013383314" "0.33687830879353" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 29 (integer, 1)
next.row (character, 100) [head]:
[1] "0.723710946040228" "0.985095223877579" "0.429624407785013"
[4] "0.582205270184204" "0.482169573195279" "0.173652553465217"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 30 (integer, 1)
next.row (character, 100) [head]:
[1] "0.411274429643527" "0.507641822332516" "0.452720062807202"
[4] "0.970162178855389" "0.920517840655521" "0.621773279504851"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 31 (integer, 1)
next.row (character, 100) [head]:
[1] "0.820946294115856"  "0.682788078673184"  "0.306443258887157" 
[4] "0.98949983343482"   "0.0415284289047122" "0.397843627491966" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 32 (integer, 1)
next.row (character, 100) [head]:
[1] "0.647060193819925" "0.601541217649356" "0.578353944001719"
[4] "0.176452036481351" "0.293991799000651" "0.955675768665969"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 33 (integer, 1)
next.row (character, 100) [head]:
[1] "0.78293276228942"  "0.238868677755818" "0.910370304249227"
[4] "0.542130424408242" "0.500850487267599" "0.653349443105981"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 34 (integer, 1)
next.row (character, 100) [head]:
[1] "0.553036311641335" "0.258165926672518" "0.142604082124308"
[4] "0.384303892031312" "0.609748935094103" "0.328743716701865"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 35 (integer, 1)
next.row (character, 100) [head]:
[1] "0.529719580197707" "0.729309623362496" "0.415047625312582"
[4] "0.676164050819352" "0.264249049592763" "0.197146713500842"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 36 (integer, 1)
next.row (character, 100) [head]:
[1] "0.789356231689453" "0.452570831403136" "0.210925750667229"
[4] "0.26929377974011"  "0.423098609549925" "0.115342324832454"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 37 (integer, 1)
next.row (character, 100) [head]:
[1] "0.023331202333793" "0.175126768415794" "0.428750370861962"
[4] "0.469250942347571" "0.366563616320491" "0.995965478708968"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 38 (integer, 1)
next.row (character, 100) [head]:
[1] "0.477230065036565" "0.746698269620538" "0.132689975202084"
[4] "0.171800082316622" "0.942505322396755" "0.379276725230739"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 39 (integer, 1)
next.row (character, 100) [head]:
[1] "0.7323137386702"   "0.104987640399486" "0.460096445865929"
[4] "0.36918946239166"  "0.123723565135151" "0.561988092726097"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 40 (integer, 1)
next.row (character, 100) [head]:
[1] "0.692731556482613"  "0.864544949028641"  "0.942957059247419" 
[4] "0.725405272562057"  "0.0700326792430133" "0.732718017650768" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 41 (integer, 1)
next.row (character, 100) [head]:
[1] "0.477619622135535" "0.614644971676171" "0.761973861604929"
[4] "0.486149104312062" "0.964317037956789" "0.870805552927777"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 42 (integer, 1)
next.row (character, 100) [head]:
[1] "0.8612094768323"    "0.557159538846463"  "0.932909828843549" 
[4] "0.0638024667277932" "0.442510108230636"  "0.572170259663835" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 43 (integer, 1)
next.row (character, 100) [head]:
[1] "0.438097107224166"  "0.328777319053188"  "0.470678497571498" 
[4] "0.784546229988337"  "0.370272380299866"  "0.0110360709950328"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 44 (integer, 1)
next.row (character, 100) [head]:
[1] "0.244797277031466" "0.453131445450708" "0.603588067693636"
[4] "0.418321635806933" "0.170243580127135" "0.906315261265263"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 45 (integer, 1)
next.row (character, 100) [head]:
[1] "0.0706790471449494" "0.500440972624347"  "0.484989680582657" 
[4] "0.981018084799871"  "0.0541904293932021" "0.770653631538153" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 46 (integer, 1)
next.row (character, 100) [head]:
[1] "0.0994661601725966" "0.180866361130029"  "0.10880631650798"  
[4] "0.282883955864236"  "0.657828069292009"  "0.382504623383284" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 47 (integer, 1)
next.row (character, 100) [head]:
[1] "0.31627170718275"   "0.529630602803081"  "0.247726832982153" 
[4] "0.847882149508223"  "0.578161916695535"  "0.0940458888653666"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 48 (integer, 1)
next.row (character, 100) [head]:
[1] "0.518634263193235"  "0.0752757457084954" "0.498514530714601" 
[4] "0.0822392308618873" "0.987101763952523"  "0.0496535839047283"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 49 (integer, 1)
next.row (character, 100) [head]:
[1] "0.662005076417699" "0.277755932649598" "0.372866708086804"
[4] "0.886458750581369" "0.603792401496321" "0.821162318112329"



Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 50) [head]:
[1] 11 12 13 14 15 16

cc: 50 (integer, 1)
next.row (character, 100) [head]:
[1] "0.406830187188461"  "0.212699519237503"  "0.934691370232031" 
[4] "0.471930730855092"  "0.0649499187711626" "0.829324304359034" 

 opening connection to matrix format datafile (3/3): splitmatR3.txt

Loading text data into big matrix object:
0         25%         50%         75%         100%
.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 1 (integer, 1)
next.row (character, 100) [head]:
[1] "0.912875924259424" "0.284790480975062" "0.523986077867448"
[4] "0.109100963454694" "0.16210908186622"  "0.654732875758782"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 2 (integer, 1)
next.row (character, 100) [head]:
[1] "0.293603372760117" "0.895094102947041" "0.317144671687856"
[4] "0.333277984522283" "0.475397920468822" "0.132827813038602"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 3 (integer, 1)
next.row (character, 100) [head]:
[1] "0.459065726259723"   "0.4462353233248"     "0.277966029476374"  
[4] "0.837416569236666"   "0.00193283474072814" "0.341809901176021"  

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 4 (integer, 1)
next.row (character, 100) [head]:
[1] "0.332394674187526" "0.779984889784828" "0.787540507735685"
[4] "0.276849841699004" "0.441459143068641" "0.731371578993276"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 5 (integer, 1)
next.row (character, 100) [head]:
[1] "0.65087046707049"  "0.880619034869596" "0.702462512534112"
[4] "0.587035141419619" "0.260929737240076" "0.907291416078806"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 6 (integer, 1)
next.row (character, 100) [head]:
[1] "0.258016780717298" "0.413124209502712" "0.165027638664469"
[4] "0.836732269730419" "0.938413745490834" "0.696196999400854"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 7 (integer, 1)
next.row (character, 100) [head]:
[1] "0.478545248275623"  "0.0638084805104882" "0.0644575387705117"
[4] "0.0711540239863098" "0.715833283727989"  "0.241579222260043" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 8 (integer, 1)
next.row (character, 100) [head]:
[1] "0.766310670645908" "0.335487491684034" "0.754705621628091"
[4] "0.702778743347153" "0.163085478357971" "0.644107228610665"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 9 (integer, 1)
next.row (character, 100) [head]:
[1] "0.0842469143681228" "0.723725946620107"  "0.620410033036023" 
[4] "0.69882453721948"   "0.476188018452376"  "0.280750213656574" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 10 (integer, 1)
next.row (character, 100) [head]:
[1] "0.875321330036968" "0.337615333497524" "0.169576766667888"
[4] "0.46396238100715"  "0.690256722969934" "0.957636520732194"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 11 (integer, 1)
next.row (character, 100) [head]:
[1] "0.339072937844321"  "0.630414122482762"  "0.0622140523046255"
[4] "0.436931110452861"  "0.460895179538056"  "0.158395956736058" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 12 (integer, 1)
next.row (character, 100) [head]:
[1] "0.839440350187942" "0.840614554006606" "0.109029268613085"
[4] "0.562176787760109" "0.95514673832804"  "0.418338991701603"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 13 (integer, 1)
next.row (character, 100) [head]:
[1] "0.34668348915875"  "0.856131664710119" "0.381716351723298"
[4] "0.928483226336539" "0.712540122447535" "0.252009797375649"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 14 (integer, 1)
next.row (character, 100) [head]:
[1] "0.333774930797517"  "0.39135928102769"   "0.169310914585367" 
[4] "0.230466414242983"  "0.397147933254018"  "0.0943902677390724"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 15 (integer, 1)
next.row (character, 100) [head]:
[1] "0.476351245073602" "0.380493885604665" "0.298652542056516"
[4] "0.221813754411414" "0.117720612091944" "0.827717769658193"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 16 (integer, 1)
next.row (character, 100) [head]:
[1] "0.892198335845023" "0.895445425994694" "0.192209535045549"
[4] "0.420215893303975" "0.24011627305299"  "0.525305503746495"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 17 (integer, 1)
next.row (character, 100) [head]:
[1] "0.864339470630512" "0.644315762910992" "0.257170021301135"
[4] "0.333520805696025" "0.863630566513166" "0.667747627478093"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 18 (integer, 1)
next.row (character, 100) [head]:
[1] "0.389989543473348" "0.741078648716211" "0.181231822818518"
[4] "0.864807550329715" "0.435976401669905" "0.408277759794146"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 19 (integer, 1)
next.row (character, 100) [head]:
[1] "0.777320698834956" "0.605303446529433" "0.477313709678128"
[4] "0.177194535732269" "0.497868051985279" "0.842589903390035"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 20 (integer, 1)
next.row (character, 100) [head]:
[1] "0.960617997217923" "0.903081611497328" "0.770737042883411"
[4] "0.49331872863695"  "0.691927672130987" "0.737305467948318"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 21 (integer, 1)
next.row (character, 100) [head]:
[1] "0.434659484773874"  "0.293730155099183"  "0.0277871224097908"
[4] "0.429713366786018"  "0.760313281789422"  "0.348224401008338" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 22 (integer, 1)
next.row (character, 100) [head]:
[1] "0.712514678714797" "0.19126010988839"  "0.527310776989907"
[4] "0.564263842999935" "0.155401222640648" "0.948938177432865"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 23 (integer, 1)
next.row (character, 100) [head]:
[1] "0.399994368897751" "0.886450943304226" "0.880319068906829"
[4] "0.656162315513939" "0.849457093048841" "0.646679189987481"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 24 (integer, 1)
next.row (character, 100) [head]:
[1] "0.325352151878178" "0.503339485730976" "0.373063371982425"
[4] "0.97855406277813"  "0.946817819029093" "0.03527776687406" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 25 (integer, 1)
next.row (character, 100) [head]:
[1] "0.757087148027495"  "0.877057543024421"  "0.0479591316543519"
[4] "0.232161148451269"  "0.588419190375134"  "0.596448455704376" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 26 (integer, 1)
next.row (character, 100) [head]:
[1] "0.202692255144939" "0.189193622441962" "0.138628246728331"
[4] "0.240811596158892" "0.502250815276057" "0.415318001527339"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 27 (integer, 1)
next.row (character, 100) [head]:
[1] "0.711121222469956"  "0.758103052387014"  "0.321492120390758" 
[4] "0.796836083987728"  "0.189779917709529"  "0.0768970381468534"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 28 (integer, 1)
next.row (character, 100) [head]:
[1] "0.121691921027377"   "0.724498892668635"   "0.154831611318514"  
[4] "0.831671715015545"   "0.00183685822412372" "0.52804887923412"   

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 29 (integer, 1)
next.row (character, 100) [head]:
[1] "0.245488513959572" "0.943724818294868" "0.132228172151372"
[4] "0.113507706439123" "0.877578062238172" "0.962333308532834"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 30 (integer, 1)
next.row (character, 100) [head]:
[1] "0.14330437942408"  "0.547646587016061" "0.221305927727371"
[4] "0.963312016334385" "0.134111337829381" "0.708740051137283"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 31 (integer, 1)
next.row (character, 100) [head]:
[1] "0.239629415096715"  "0.711743867723271"  "0.226380796171725" 
[4] "0.147322899661958"  "0.0227412241511047" "0.553475703578442" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 32 (integer, 1)
next.row (character, 100) [head]:
[1] "0.0589343772735447" "0.388905099825934"  "0.13141653384082"  
[4] "0.143626942764968"  "0.939136706059799"  "0.242956608999521" 

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 33 (integer, 1)
next.row (character, 100) [head]:
[1] "0.642288258532062" "0.100873126182705" "0.981563460314646"
[4] "0.925229935208336" "0.292948722839355" "0.778042529011145"

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 34 (integer, 1)
next.row (character, 100) [head]:
[1] "0.876269212691113" "0.927302088588476" "0.327013726811856"
[4] "0.507035602582619" "0.164326574420556" "0.651940943440422"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 35 (integer, 1)
next.row (character, 100) [head]:
[1] "0.778914677444845" "0.283232500310987" "0.506939497077838"
[4] "0.15485101705417"  "0.399102555820718" "0.830245703924447"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 36 (integer, 1)
next.row (character, 100) [head]:
[1] "0.79730882588774"  "0.59057315881364"  "0.68144251476042" 
[4] "0.348302052123472" "0.459575412096456" "0.648550947429612"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 37 (integer, 1)
next.row (character, 100) [head]:
[1] "0.455274453619495"  "0.110360604943708"  "0.0991691031958908"
[4] "0.659821025794372"  "0.434030848555267"  "0.479835794307292" 

..
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 38 (integer, 1)
next.row (character, 100) [head]:
[1] "0.410084082046524" "0.840507032116875" "0.118902558228001"
[4] "0.311772374436259" "0.517009826377034" "0.495064105605707"

.
Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 39 (integer, 1)
next.row (character, 100) [head]:
[1] "0.810870242770761"  "0.317963684443384"  "0.0504396595060825"
[4] "0.351573409279808"  "0.846245752647519"  "0.379872591467574" 



Big matrix; 'bigVar', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786        0        0   ...          0 


nxt.rng (integer, 40) [head]:
[1] 61 62 63 64 65 66

cc: 40 (integer, 1)
next.row (character, 100) [head]:
[1] "0.604933290276676"  "0.782851336989552"  "0.929253919748589" 
[4] "0.147845706902444"  "0.0551642864011228" "0.450485437177122" 


 created big.matrix description file: p7.dsc 
 created big.matrix backing file: p7.bck 
> prv.big.matrix(ii)

Big matrix; 'p7.RData', with: 100 rows, 100 columns
 - data type: numeric 

               colnames 
Row#  rownames     col1     col2  .....    col100 
   1 rs2669563   0.2655   0.6547   ...     0.0652 
   2 rs6473916   0.3721   0.3532   ...     0.2774 
   3 rs7581508   0.5729   0.2703   ...     0.6004 
  ..      ....      ...      ...   ...        ... 
 100 rs5898786   0.6049   0.7829   ...     0.6527 

> 
> # DELETE ALL FILES ##
> unlink(all.fn[!any.already]) # prevent deleting user's files
> ## many files to clean up! ##
> unlink(c("funclongcol.bck","funclongcol.dsc","functest.bck","functest.dsc",
+  "functestdn.RData","functestdn.bck","functestdn.dsc","functestdn_file_rowname_list_check_this.txt",
+  "split1.bck","split1.dsc","splitmatR1.bck","splitmatR1.dsc", paste0("p",2:7)))
> setwd(orig.dir) # reset working dir to original
> 
> 
> 
> cleanEx()
> nameEx("pca.scree.plot")
> ### * pca.scree.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pca.scree.plot
> ### Title: Make scree plots for any PCA
> ### Aliases: pca.scree.plot
> 
> ### ** Examples
> 
> require(irlba)
Loading required package: irlba
Loading required package: Matrix
> nsamp <- 100; nvar <- 300; subset.size <- 25; elbow <- 6
> mat <- matrix(rnorm(nsamp*nvar),ncol=nsamp) 
> #this gives the full solution
> pca <- svd(mat,nv=subset.size,nu=0)
> pca2 <- irlba(mat,nv=subset.size,nu=0)
> # show alternate fits for linear versus 1/x fit
> pca.scree.plot((pca2$d^2)[1:subset.size],n.xax=100,add.fit.line=TRUE,
+                min.dim=min(dim(mat)),linear=TRUE, elbow=6, ylim=c(0,1400))
 estimate of eigenvalue sum of 75 uncalculated eigenvalues: 8693.526 
 slope [a + bx] : -10.39908 
 [1] 611.257966 600.858882 590.459798 580.060715 569.661631 559.262547
 [7] 548.863463 538.464379 528.065295 517.666211 507.267128 496.868044
[13] 486.468960 476.069876 465.670792 455.271708 444.872624 434.473541
[19] 424.074457 413.675373 403.276289 392.877205 382.478121 372.079037
[25] 361.679954 351.280870 340.881786 330.482702 320.083618 309.684534
[31] 299.285450 288.886367 278.487283 268.088199 257.689115 247.290031
[37] 236.890947 226.491863 216.092780 205.693696 195.294612 184.895528
[43] 174.496444 164.097360 153.698276 143.299193 132.900109 122.501025
[49] 112.101941 101.702857  91.303773  80.904689  70.505606  60.106522
[55]  49.707438  39.308354  28.909270  18.510186   8.111102   0.000000
[61]   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000
[67]   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000
[73]   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000
[79]   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000
[85]   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000
[91]   0.000000   0.000000   0.000000   0.000000
[1] 94
[1] 94
> pca.scree.plot((pca2$d^2)[1:subset.size],n.xax=100,add.fit.line=TRUE,
+               min.dim=min(dim(mat)),linear=FALSE, elbow=40, ylim=c(0,1400))
Warning in estimate.eig.vpcs(eigenv = eigenv, min.dim = min.dim, elbow = elbow,  :
  didn't attempt to estimate eigenvalues as there were very few unknowns compared to the number of samples, or not enough eigenvalues between the elbow and 'min.dim'
> subset.size <- 75
> pca2 <- irlba(mat,nv=subset.size,nu=0)
Warning in irlba(mat, nv = subset.size, nu = 0) :
  You're computing too large a percentage of total singular values, use a standard svd instead.
> pca.scree.plot((pca2$d^2)[1:subset.size],n.xax=100,add.fit.line=TRUE,
+               min.dim=min(dim(mat)),linear=TRUE, elbow=6, ylim=c(0,1400))
 estimate of eigenvalue sum of 25 uncalculated eigenvalues: 1060.358 
 slope [a + bx] : -6.564422 
 [1] 564.19824 557.63382 551.06940 544.50497 537.94055 531.37613 524.81171
 [8] 518.24729 511.68287 505.11844 498.55402 491.98960 485.42518 478.86076
[15] 472.29634 465.73191 459.16749 452.60307 446.03865 439.47423 432.90981
[22] 426.34538 419.78096 413.21654 406.65212 400.08770 393.52328 386.95886
[29] 380.39443 373.83001 367.26559 360.70117 354.13675 347.57233 341.00790
[36] 334.44348 327.87906 321.31464 314.75022 308.18580 301.62137 295.05695
[43] 288.49253 281.92811 275.36369 268.79927 262.23484 255.67042 249.10600
[50] 242.54158 235.97716 229.41274 222.84831 216.28389 209.71947 203.15505
[57] 196.59063 190.02621 183.46178 176.89736 170.33294 163.76852 157.20410
[64] 150.63968 144.07525 137.51083 130.94641 124.38199 117.81757 111.25315
[71] 104.68872  98.12430  91.55988  84.99546  78.43104  71.86662  65.30219
[78]  58.73777  52.17335  45.60893  39.04451  32.48009  25.91566  19.35124
[85]  12.78682   6.22240   0.00000   0.00000   0.00000   0.00000   0.00000
[92]   0.00000   0.00000   0.00000
[1] 94
[1] 94
> pca.scree.plot((pca2$d^2)[1:subset.size],n.xax=100,add.fit.line=TRUE,
+               min.dim=min(dim(mat)),linear=FALSE, elbow=40, ylim=c(0,1400))
 estimate of eigenvalue sum of 25 uncalculated eigenvalues: 3763.122 
 slope [b/x, no intercept] : 13080.83 
 [1] 319.0448 311.4484 304.2055 297.2917 290.6852 284.3660 278.3156 272.5174
 [9] 266.9558 261.6167 256.4870 251.5545 246.8082 242.2377 237.8334 233.5863
[17] 229.4883 225.5316 221.7091 218.0139 214.4399 210.9812 207.6323 204.3880
[25] 201.2436 198.1945 195.2363 192.3652 189.5773 186.8691 184.2371 181.6783
[33] 179.1895 176.7680 174.4111 172.1162 169.8810 167.7030 165.5802 163.5104
[41] 161.4918 159.5224 157.6004 155.7242 153.8922 152.1027 150.3544 148.6459
[49] 146.9757 145.3426 143.7454 142.1830 140.6541 139.1578 137.6930 136.2587
[57] 134.8540 133.4779 132.1296 130.8083
[1] 60
[1] 60
> 
> 
> 
> cleanEx()

detaching ‘package:irlba’, ‘package:Matrix’

> nameEx("prv.big.matrix")
> ### * prv.big.matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prv.big.matrix
> ### Title: Tidier display function for big matrix objects
> ### Aliases: prv.big.matrix
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("test.bck")) { unlink(c("test.bck","test.dsc")) }
> bM <- filebacked.big.matrix(20, 50,
+        dimnames = list(paste("r",1:20,sep=""), paste("c",1:50,sep="")),
+        backingfile = "test.bck",  backingpath = getwd(), descriptorfile = "test.dsc")
> bM[1:20,] <- replicate(50,rnorm(20))
> prv.big.matrix(bM)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2  .....       c50 
   1       r1  -0.6265    0.919   ...     0.4637 
   2       r2   0.1836   0.7821   ...     0.0748 
   3       r3  -0.8356   0.0746   ...    -0.4868 
  ..      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632   ...    -0.6973 

> prv.big.matrix(bM,rows=10,cols=4)
Big matrix with: 20 rows, 50 columns
 - data type: numeric 

              colnames 
Row# rownames       c1       c2       c3       c4  .....       c50 
   1       r1  -0.6265    0.919  -0.1645   2.4016   ...     0.4637 
   2       r2   0.1836   0.7821  -0.2534  -0.0392   ...     0.0748 
   3       r3  -0.8356   0.0746    0.697   0.6897   ...    -0.4868 
   4       r4   1.5953  -1.9894   0.5567    0.028   ...     0.7489 
   5       r5   0.3295   0.6198  -0.6888  -0.7433   ...     0.4642 
   6       r6  -0.8205  -0.0561  -0.7075   0.1888   ...     0.1294 
   7       r7   0.4874  -0.1558   0.3646   -1.805   ...    -0.8155 
   8       r8   0.7383  -1.4708   0.7685   1.4656   ...    -0.0402 
   9       r9   0.5758  -0.4782  -0.1123   0.1533   ...     0.7814 
  10      r10  -0.3054   0.4179   0.8811   2.1726   ...     0.6765 
  ..      ...      ...      ...      ...      ...   ...        ... 
  20      r20   0.5939   0.7632  -0.1351  -0.5895   ...    -0.6973 

> rm(bM) 
> unlink(c("test.dsc","test.bck"))  # clean up files
> setwd(orig.dir)
> 
> 
> 
> cleanEx()
> nameEx("quick.elbow")
> ### * quick.elbow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quick.elbow
> ### Title: Quickly estimate the 'elbow' of a scree plot (PCA)
> ### Aliases: quick.elbow
> 
> ### ** Examples
> 
> # correlated data
> mat <- sim.cor(100,50)
> result <- princomp(mat)
> eig <- result$sdev^2
> elb.a <- quick.elbow(eig)
> pca.scree.plot(eig,elbow=elb.a,M=mat) 
> elb.b <- quick.elbow(eig,low=.05) # decrease 'low' to select more components
> pca.scree.plot(eig,elbow=elb.b,M=mat) 
> # random (largely independent) data, usually higher elbow #
> mat2 <- generate.test.matrix(5,3)
> result2 <- princomp(mat2)
> eig2 <- result2$sdev^2
> elb2 <- quick.elbow(result2$sdev^2)
> pca.scree.plot(eig2,elbow=elb2,M=mat2)
> 
> 
> 
> cleanEx()
> nameEx("quick.pheno.assocs")
> ### * quick.pheno.assocs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quick.pheno.assocs
> ### Title: Quick association tests for phenotype
> ### Aliases: quick.pheno.assocs
> 
> ### ** Examples
> 
> bmat <- generate.test.matrix(5,big.matrix=TRUE)
> pheno <- rep(1,ncol(bmat)); pheno[which(runif(ncol(bmat))<.5)] <- 2
> ids <- colnames(bmat); samp.inf <- data.frame(phenotype=pheno); rownames(samp.inf) <- ids
> both <- quick.pheno.assocs(bmat,samp.inf); prv(both)
both (data.frame, 100*2)

              colnames 
Row# rownames          F           p 
   1  rs77792     1.2169      0.2702 
   2  rs48313     0.6859      0.4077 
   3  rs10907     3.7119      0.0543 
  ..     ....        ...         ... 
 100  rs33140     0.0674      0.7952 

> Fs <- quick.pheno.assocs(bmat,samp.inf,verbose=TRUE,p.values=FALSE); prv(Fs)
 running row-wise tests against phenotype 
 found 2 phenotypes, t.test will be used to summarise rows most associated with phenotype

 took 0 minutes

Summary of F statistics returned:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.000007 0.121646 0.511956 0.843336 1.217207 4.959869 

Fs (numeric, 100) [head]:
     rs77792      rs48313      rs10907      rs43836      rs96438      rs52445 
1.2169352358 0.6859369345 3.7119444627 0.0001897005 0.0167679096 0.0069694157 

> Ps <- quick.pheno.assocs(bmat,samp.inf,F.values=FALSE); prv(Ps)
Ps (numeric, 100) [head]:
   rs77792    rs48313    rs10907    rs43836    rs96438    rs52445 
0.27022862 0.40774764 0.05430783 0.98901369 0.89699524 0.93348420 

> 
> 
> 
> cleanEx()
> nameEx("select.least.assoc")
> ### * select.least.assoc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select.least.assoc
> ### Title: Select subset of rows least associated with a categorical
> ###   variable
> ### Aliases: select.least.assoc
> 
> ### ** Examples
> 
> bmat <- generate.test.matrix(5,big.matrix=TRUE)
> pheno <- rep(1,ncol(bmat)); pheno[which(runif(ncol(bmat))<.5)] <- 2
> most.correl <- select.least.assoc(bmat,phenotype=pheno,least=FALSE)
 running row-wise tests against phenotype 
 found 2 phenotypes, t.test will be used to summarise rows most associated with phenotype

 took 0 minutes

Summary of p-value statistics returned:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.02616 0.27018 0.47447 0.50097 0.72735 0.99785 

> least.correl <- select.least.assoc(bmat,phenotype=pheno,least=TRUE)
 running row-wise tests against phenotype 
 found 2 phenotypes, t.test will be used to summarise rows most associated with phenotype

 took 0 minutes

Summary of p-value statistics returned:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.02616 0.27018 0.47447 0.50097 0.72735 0.99785 

> cor(bmat[least.correl,][1,],pheno)  # least correlated
[1] -0.0004359823
> cor(bmat[most.correl,][1,],pheno)  # most correlated
[1] 0.06087365
> 
> 
> 
> cleanEx()
> nameEx("subcor.select")
> ### * subcor.select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subcor.select
> ### Title: Selection of the most correlated variable subset
> ### Aliases: subcor.select
> 
> ### ** Examples
> 
> mat <- matrix(rnorm(200*2000),ncol=200)
> bmat <- as.big.matrix(mat)
> ii1 <- subcor.select(bmat,.05,rows=TRUE) # thin down to 5% of the rows
> ii2 <- subcor.select(bmat,45,rows=FALSE) # thin down to 45 columns
> prv(ii1,ii2)
ii1 (integer, 100) [head]:
[1]  9 23 24 47 49 55

ii2 (integer, 45) [head]:
[1] 17 28 30 43 68 70

> # show that rows=T is equivalent to rows=F of the transpose (random must be FALSE)
> ii1 <- subcor.select(mat,.4,rows=TRUE,random=FALSE)
> ii2 <- subcor.select(t(mat),.4,rows=FALSE,random=FALSE)
> print(all.equal(ii1,ii2))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("subpc.select")
> ### * subpc.select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subpc.select
> ### Title: Selection of a representative variable subset
> ### Aliases: subpc.select
> 
> ### ** Examples
> 
> mat <- matrix(rnorm(200*2000),ncol=200) # normal matrix
> bmat <- as.big.matrix(mat)              # big matrix
> ii <- subpc.select(bmat,.05,rows=TRUE) # thin down to 5% of the rows
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> ii <- subpc.select(bmat,45,rows=FALSE) # thin down to 45 columns
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> # show that rows=T is equivalent to rows=F of the transpose (random must be FALSE)
> ii1 <- subpc.select(mat,.4,rows=TRUE,random=FALSE)
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> ii2 <- subpc.select(t(mat),.4,rows=FALSE,random=FALSE)
 means for first 10 snps:
 [1] 0 0 0 0 0 0 0 0 0 0
> print(all.equal(ii1,ii2))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("svn.bigalgebra.install")
> ### * svn.bigalgebra.install
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: svn.bigalgebra.install
> ### Title: Attempt to install the bigalgebra package using SVN
> ### Aliases: svn.bigalgebra.install
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("thin")
> ### * thin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: thin
> ### Title: Reduce one dimension of a large matrix in a strategic way
> ### Aliases: thin
> 
> ### ** Examples
> 
> orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
> if(file.exists("thin.bck")) { unlink(c("thin.bck","thin.dsc")) }
> bmat <- generate.test.matrix(5,big.matrix=TRUE)
> prv.big.matrix(bmat)
Big matrix with: 100 rows, 1000 columns
 - data type: numeric 
 - not filebacked
              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs77792   0.3701   0.8872   ...     1.6589 
   2  rs48313  -0.5753   1.0604   ...    -0.0077 
   3  rs10907   2.9192  -0.6157   ...     0.7742 
  ..     ....      ...      ...   ...        ... 
 100  rs33140   2.5446  -1.8544   ...     1.0078 

> # make 5% random selection:
> lmat <- thin(bmat, pref="th2")
th2.dsc 
  "th2" 
> prv.big.matrix(lmat)
Big matrix with: 5 rows, 1000 columns
 - data type: numeric 

              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs47857  -0.1822   1.4259   ...    -0.9072 
   2  rs41915   0.6645   0.6861   ...    -0.0306 
   3  rs74317  -0.3208   0.4672   ...     1.7737 
   .     ....      ...      ...   ...        ... 
   5  rs35611    -0.76  -1.0415   ...    -2.2071 

> # make 10% most orthogonal selection (lowest correlations):
> lmat <- thin(bmat,.10,"cor",hi.cor=FALSE, pref="th3")
th3.dsc 
  "th3" 
> prv.big.matrix(lmat)
Big matrix with: 10 rows, 1000 columns
 - data type: numeric 

              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs44460   0.8634   0.9405   ...      0.029 
   2  rs34476  -0.3878   0.5592   ...    -0.7838 
   3  rs79118   0.5794  -0.0081   ...     0.7997 
  ..     ....      ...      ...   ...        ... 
  10  rs85226   0.1629   1.2462   ...    -1.9117 

> # make 10% most representative selection:
> lmat <- thin(bmat,.10,"PCA",ret.obj=FALSE, pref="th4") # return file name instead of object
 means for first 10 snps:
rs77792 rs48313 rs10907 rs43836 rs96438 rs52445 rs23774 rs91142 rs68100 rs60128 
      0       0       0       0       0       0       0       0       0       0 
th4.dsc 
  "th4" 
> print(lmat)
[1] "/tmp/RtmpHAlPrw/th4.RData"
> prv.big.matrix(lmat)

Big matrix; 'th4.RData', with: 10 rows, 1000 columns
 - data type: numeric 

              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs88918   1.1896  -1.8277   ...    -1.2073 
   2  rs79415   1.0747  -1.8712   ...     0.7277 
   3  rs51539  -0.4336   -0.503   ...    -0.3197 
  ..     ....      ...      ...   ...        ... 
  10  rs52953  -1.9839  -0.4265   ...      1.266 

> # make 25% selection most correlated to phenotype
> # create random phenotype variable
> pheno <- rep(1,ncol(bmat)); pheno[which(runif(ncol(bmat))<.5)] <- 2
> lmat <- thin(bmat,.25,"assoc",phenotype=pheno,least=FALSE,verbose=TRUE, pref="th5")
 running row-wise tests against phenotype 
 found 2 phenotypes, t.test will be used to summarise rows most associated with phenotype

 took 0 minutes

Summary of p-value statistics returned:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.01025 0.22763 0.48434 0.49523 0.77189 0.99130 

th5.dsc 
  "th5" 
 attached matrix with dims: 100,1000 
 calculating selections for rows
 selected 1000 listed samples and 25 variables

Reordering Variables and Samples...

INDEXES SUMMARY
25 row indexes range is from 2 to 93 
-->, 2, 3, 6, 11, 12, 15
1000 col indexes range is from 1 to 1000 
-->, 1, 2, 3, 4, 5, 6

 raw big.matrix summary before selection/ordering:

Big matrix with: 100 rows, 1000 columns
 - data type: numeric 
 - not filebacked
              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs77792   0.3701   0.8872   ...     1.6589 
   2  rs48313  -0.5753   1.0604   ...    -0.0077 
   3  rs10907   2.9192  -0.6157   ...     0.7742 
  ..     ....      ...      ...   ...        ... 
 100  rs33140   2.5446  -1.8544   ...     1.0078 

 starting deep copy...done

Adding names
 added colnames
 added rownames
 due to use of deep copy option, recommend only to use descr saved as rbinary description file
 created big.matrix description file: th5.dsc 
 created big.matrix backing file: th5.bck 
 created big.matrix binary description file: th5.RData 
> prv.big.matrix(lmat)
Big matrix with: 25 rows, 1000 columns
 - data type: numeric 

              colnames 
Row# rownames  ID58003  ID86734  .....   ID22199 
   1  rs48313  -0.5753   1.0604   ...    -0.0077 
   2  rs10907   2.9192  -0.6157   ...     0.7742 
   3  rs52445   0.8696   0.4221   ...    -1.3326 
  ..     ....      ...      ...   ...        ... 
  25  rs67603   1.0024  -0.7453   ...     0.3214 

> # tidy up temporary files:
> rm(lmat) 
> unlink(c("thin.bck","thin.dsc","thin.RData",paste0("th",2:5)))
> setwd(orig.dir)
> 
> 
> 
> cleanEx()
> nameEx("uniform.select")
> ### * uniform.select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: uniform.select
> ### Title: Derive a subset of a large dataset
> ### Aliases: uniform.select
> 
> ### ** Examples
> 
> mat <- matrix(rnorm(200*100),ncol=200)  # standard matrix
> bmat <- as.big.matrix(mat)              # big.matrix
> ii1 <- uniform.select(bmat,.05,rows=TRUE) # thin down to 5% of the rows
> ii2 <- uniform.select(bmat,45,rows=FALSE,random=TRUE) # thin down to 45 columns
> prv(ii1,ii2)
ii1 (list, 5; 200 )
$order.r:
[1]  4 10 40 66 81
$order.c:
[1] 1 2 3 4 5 6
NULL

ii2 (list, 100; 45 )
$order.r:
[1] 1 2 3 4 5 6
$order.c:
[1]  2  4  6 19 25 32
NULL

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.3 0.408 9.233 0.517 0.418 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
